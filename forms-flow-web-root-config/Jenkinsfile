pipeline {
    environment {
        DEPLOY = "${env.BRANCH_NAME == "develop" ? "true" : "false"}"
        NAME = "${env.BRANCH_NAME == "develop" ? "example" : "example-staging"}"
    }
    
    agent any
    
     stages {
        stage('Checkout forms-flow-web-root-config') {
             when {
                environment name: 'DEPLOY', value: 'true'
            }
            steps {
                git branch: 'develop',
                    url: 'https://MihailStefanov:ATBBNbJZnqewR5NzBUmTFFt4C3uRC8D7397D@bitbucket.org/intracol/forms-flow-web-root-config.git'
            }
        }

        stage('Build forms-flow-web-root-config') {
             when {
                environment name: 'DEPLOY', value: 'true'
            }
            steps {
                sh 'sudo docker build -t sofiamunicipalitydigitall/forms-flow-web-root-config:latest . --build-arg="MF_FORMSFLOW_NAV_URL=http://digital-admin.digitalsofia.digital/mf/forms-flow-web-mf-nav/dist/forms-flow-nav.js" --build-arg="MF_FORMSFLOW_SERVICE_URL=http://digital-admin.digitalsofia.digital/mf/forms-flow-web-mf-service/dist/forms-flow-service.js" --build-arg="MF_FORMSFLOW_ADMIN_URL=http://digital-admin.digitalsofia.digital/mf/forms-flow-web-mf-admin/dist/forms-flow-admin.js" --build-arg="MF_FORMSFLOW_THEME_URL=http://digital-admin.digitalsofia.digital/mf/forms-flow-web-mf-theme/dist/forms-flow-theme.js" --build-arg="MF_FORMSFLOW_WEB_URL=http://digital-admin.digitalsofia.digital/mf/forms-flow-web-mf/build/forms-flow-web.js"'
            }
        }

        stage('Push Image') {
             when {
                environment name: 'DEPLOY', value: 'true'
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'sudo docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'sudo docker push $DOCKER_USERNAME/forms-flow-web-root-config:latest'
                }
            }
        }

        stage('Deploy DEV') {
            when {
                environment name: 'DEPLOY', value: 'true'
            }
            steps {
                withKubeConfig([credentialsId: 'kubeconfig', serverUrl: 'https://192.168.201.47:6443']) {
                   sh 'kubectl delete all --all -n forms-flow-web-root-config '
                   sh 'kubectl apply -f ./infra/dev/deployment_dev.yaml '
                   sh 'kubectl apply -f ./infra/dev/service_dev.yaml '
                   sh 'kubectl apply -f ./infra/dev/ingress_dev.yaml '
                    }
                }
            }
            
            
        stage('Push Image with Tag') {
             when {
                tag "release-*"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'sudo docker tag $DOCKER_USERNAME/forms-flow-web-root-config:latest $DOCKER_USERNAME/forms-flow-web-root-config:releasetest'
                    sh 'sudo docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                    sh 'sudo docker push $DOCKER_USERNAME/forms-flow-web-root-config:releasetest'
                }
            }
        }
            
        stage('Deploy TEST') {
            when {
                //allOf {
                //environment name: 'DEPLOY', value: 'true'
                tag "release-*" 
               // buildingTag()
                //}
            }
            steps {
                withKubeConfig([credentialsId: 'kubeconfig-test', serverUrl: 'https://192.168.201.42:6443']) {
                   sh 'kubectl delete all --all -n forms-flow-web-root-config '
                   sh 'kubectl apply -f ./infra/test/deployment_test.yaml '
                   sh 'kubectl apply -f ./infra/test/service_test.yaml '
                   sh 'kubectl apply -f ./infra/test/ingress_test.yaml '
                    }
                }
            }
    }
}